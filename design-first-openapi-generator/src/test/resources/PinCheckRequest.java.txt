/*
 * txproc-design-first-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.schlau.pesche.apidocs.openapi.designfirst.generated.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request for checking a PIN
 */
@JsonPropertyOrder({
  PinCheckRequest.JSON_PROPERTY_PAN,
  PinCheckRequest.JSON_PROPERTY_PIN_BLOCK,
  PinCheckRequest.JSON_PROPERTY_UUID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PinCheckRequest {
  public static final String JSON_PROPERTY_PAN = "pan";
  private ch.schlau.pesche.apidocs.openapi.designfirst.txproc.model.Pan pan;

  public static final String JSON_PROPERTY_PIN_BLOCK = "pinBlock";
  private String pinBlock;

  public static final String JSON_PROPERTY_UUID = "uuid";
  private UUID uuid;

  public PinCheckRequest() { 
  }

  public PinCheckRequest pan(ch.schlau.pesche.apidocs.openapi.designfirst.txproc.model.Pan pan) {
    this.pan = pan;
    return this;
  }

   /**
   * Get pan
   * @return pan
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ch.schlau.pesche.apidocs.openapi.designfirst.txproc.model.Pan getPan() {
    return pan;
  }


  @JsonProperty(JSON_PROPERTY_PAN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPan(ch.schlau.pesche.apidocs.openapi.designfirst.txproc.model.Pan pan) {
    this.pan = pan;
  }


  public PinCheckRequest pinBlock(String pinBlock) {
    this.pinBlock = pinBlock;
    return this;
  }

   /**
   * Encrypted binary data containing a PIN  Fieldcode: C003
   * @return pinBlock
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PIN_BLOCK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPinBlock() {
    return pinBlock;
  }


  @JsonProperty(JSON_PROPERTY_PIN_BLOCK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPinBlock(String pinBlock) {
    this.pinBlock = pinBlock;
  }


  public PinCheckRequest uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique ID of the request
   * @return uuid
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  /**
   * Return true if this PinCheckRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PinCheckRequest pinCheckRequest = (PinCheckRequest) o;
    return Objects.equals(this.pan, pinCheckRequest.pan) &&
        Objects.equals(this.pinBlock, pinCheckRequest.pinBlock) &&
        Objects.equals(this.uuid, pinCheckRequest.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pan, pinBlock, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PinCheckRequest {\n");
    sb.append("    pan: ").append(toIndentedString(pan)).append("\n");
    sb.append("    pinBlock: ").append(toIndentedString(pinBlock)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

