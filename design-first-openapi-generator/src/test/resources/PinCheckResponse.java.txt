/*
 * txproc-design-first-openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.schlau.pesche.apidocs.openapi.designfirst.generated.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Tells if the PIN in the request was correct
 */
@JsonPropertyOrder({
  PinCheckResponse.JSON_PROPERTY_RESULT,
  PinCheckResponse.JSON_PROPERTY_TRIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PinCheckResponse {
  /**
   * Result of the request
   */
  public enum ResultEnum {
    OK("OK"),
    
    WRONG("WRONG");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESULT = "result";
  private ResultEnum result;

  public static final String JSON_PROPERTY_TRIES = "tries";
  private Integer tries;

  public PinCheckResponse() { 
  }

  public PinCheckResponse result(ResultEnum result) {
    this.result = result;
    return this;
  }

   /**
   * Result of the request
   * @return result
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResultEnum getResult() {
    return result;
  }


  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public PinCheckResponse tries(Integer tries) {
    this.tries = tries;
    return this;
  }

   /**
   * Number of remaining tries
   * @return tries
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTries() {
    return tries;
  }


  @JsonProperty(JSON_PROPERTY_TRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTries(Integer tries) {
    this.tries = tries;
  }


  /**
   * Return true if this PinCheckResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PinCheckResponse pinCheckResponse = (PinCheckResponse) o;
    return Objects.equals(this.result, pinCheckResponse.result) &&
        Objects.equals(this.tries, pinCheckResponse.tries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, tries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PinCheckResponse {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    tries: ").append(toIndentedString(tries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

